package pnnl.goss.osgi.vaadin.securitydemo.impl;


import org.apache.felix.ipojo.annotations.Requires;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import pnnl.goss.osgi.vaadin.DemoPMUService;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.VaadinServlet;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class DesignDemoComponent extends CustomComponent {
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */




	@AutoGenerated
	private AbsoluteLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout horizontalButtons;

	@AutoGenerated
	private Button stopPollingBtn;

	@AutoGenerated
	private Button startPollingBtn;

	@AutoGenerated
	private OptionGroup pmus;

	@AutoGenerated
	private VerticalLayout verticalInputs;

	@AutoGenerated
	private DateField startTime;

	@AutoGenerated
	private TextField timeShown;

	@AutoGenerated
	private TextField pollFreq;

	private static final Logger log = LoggerFactory.getLogger(DesignDemoComponent.class);

	@Requires
	protected DemoPMUService gossService;
	
	public DesignDemoComponent(){
		// load an service out of OSGi
		BundleContext context = ((DemoServlet)VaadinServlet.getCurrent()).getBundleContext();
		ServiceReference ref = context.getServiceReference(DemoPMUService.class.getName());
		gossService = (DemoPMUService) context.getService(ref);
		if(gossService==null){
			log.warn("gossService should not be null!");
		}
		
		buildMainLayout();
	}
	
	DataGetter dataGetter = new DataGetter();
	private class StartClickListener implements ClickListener{
		Button startButton;
		Button stopButton;
		public StartClickListener(Button stopButton){
			this.stopButton = stopButton;
		}
		
		@Override
		public void buttonClick(ClickEvent event) {
			this.startButton = event.getButton();
			stopButton.setEnabled(true);
			startButton.setEnabled(false);
			dataGetter.running = true;
			dataGetter.startButtonListener = this;
			dataGetter.start();
		}
		
		
		public void resetButtons(){
			System.out.println("RESET "+startButton);
			if(startButton!=null){
				startButton.setEnabled(true);
				stopButton.setEnabled(false);
			}
		}
	}
	
	private class StopClickListener implements ClickListener{
		Button startButton;
		public StopClickListener(Button startButton){
			this.startButton = startButton;
		}
		
		@Override
		public void buttonClick(ClickEvent event) {
			startButton.setEnabled(true);
			event.getButton().setEnabled(false);
			dataGetter.running = false;
			dataGetter.interrupt();
		}
		
	}
	
	
	
	
	private class DataGetter extends Thread{

		boolean running = false;
		StartClickListener startButtonListener;
		
		@Override
		public void run() {
			try {
				while(running){
					System.out.println("REQUESTING DATA ");
//					gossService.requestPMUData("01-01-2010 00:27:00", "01-04-2010 00:27:00", "5,6,7");
				
				
				
					wait(1000);
				}
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				log.error("Interupted exception"+e.getMessage(), e);
				System.out.println("LISTENER "+startButtonListener);
				if(startButtonListener!=null){
					startButtonListener.resetButtons();
				}
			} catch(Throwable e){
				log.error("Other exception"+e.getMessage(), e);
				System.out.println("LISTENER "+startButtonListener);
				if(startButtonListener!=null){
					startButtonListener.resetButtons();
				}
			}
			
		}
		
	}




	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalInputs
		verticalInputs = buildVerticalInputs();
		mainLayout.addComponent(verticalInputs);
		
		// pmus
		pmus = new OptionGroup();
		pmus.setImmediate(false);
		pmus.setWidth("260px");
		pmus.setHeight("-1px");
		mainLayout.addComponent(pmus, "top:10.0px;left:220.0px;");
		
		// horizontalButtons
		horizontalButtons = buildHorizontalButtons();
		mainLayout.addComponent(horizontalButtons, "top:150.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalInputs() {
		// common part: create layout
		verticalInputs = new VerticalLayout();
		verticalInputs.setImmediate(false);
		verticalInputs.setWidth("200px");
		verticalInputs.setHeight("120px");
		verticalInputs.setMargin(false);
		
		// pollFreq
		pollFreq = new TextField();
		pollFreq.setImmediate(false);
		pollFreq.setWidth("-1px");
		pollFreq.setHeight("-1px");
		verticalInputs.addComponent(pollFreq);
		
		// timeShown
		timeShown = new TextField();
		timeShown.setImmediate(false);
		timeShown.setWidth("-1px");
		timeShown.setHeight("-1px");
		verticalInputs.addComponent(timeShown);
		
		// startTime
		startTime = new DateField();
		startTime.setImmediate(false);
		startTime.setWidth("-1px");
		startTime.setHeight("-1px");
		verticalInputs.addComponent(startTime);
		
		return verticalInputs;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalButtons() {
		// common part: create layout
		horizontalButtons = new HorizontalLayout();
		horizontalButtons.setImmediate(false);
		horizontalButtons.setWidth("-1px");
		horizontalButtons.setHeight("-1px");
		horizontalButtons.setMargin(false);
		
		// startPollingBtn
		startPollingBtn = new Button();
		startPollingBtn.setCaption("Button");
		startPollingBtn.setImmediate(false);
		startPollingBtn.setWidth("-1px");
		startPollingBtn.setHeight("-1px");
		horizontalButtons.addComponent(startPollingBtn);
		
		// stopPollingBtn
		stopPollingBtn = new Button();
		stopPollingBtn.setCaption("Button");
		stopPollingBtn.setEnabled(false);
		stopPollingBtn.setImmediate(false);
		stopPollingBtn.setWidth("-1px");
		stopPollingBtn.setHeight("-1px");
		horizontalButtons.addComponent(stopPollingBtn);
		
		return horizontalButtons;
	}
}
