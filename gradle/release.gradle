class Version {
	int major
	int minor
	int bugfix
	boolean snapshot = true
	static Version load(File versionFile){
		def props = new Properties()
		versionFile.withInputStream { stream ->
			props.load(stream)
		}
		def major = Integer.parseInt(props['major'])
		def minor = Integer.parseInt(props['minor'])
		def bugfix = Integer.parseInt(props['bugfix'])
		return new Version(major:major, minor:minor, bugfix:bugfix)
	}
	String toString(){
		"${major}.${minor}.${bugfix}${snapshot ? '-SNAPSHOT':''}"
	}
	void store(File versionFile){
		def props = new Properties()
		props['bugfix'] = bugfix.toString()
		props['major'] = major.toString()
		props['minor'] = minor.toString()
		props.store(versionFile.newWriter(), null)
	}
	Version next(String releaseType = "bugfix"){
		if(releaseType == "major"){
			return new Version(major:major+1, minor:0, bugfix:0)
		}else if(releaseType == "minor"){
			return new Version(major:major, minor:minor+1, bugfix:0)
		}else{
			return new Version(major:major, minor:minor, bugfix:bugfix+1)
		}
	}
}
def latest = Version.load(rootProject.file("latest.properties"))
allprojects{
	version = latest.next()
}
gradle.taskGraph.whenReady { graph ->
	allprojects{
		if(graph.hasTask(":release")){
			version = latest.next(release.type)
			version.snapshot = false
		}
	}
}
task persistVersionInfo(type:Exec){
	commandLine 'git', 'commit', "-i", "latest.properties", "-m", "'${-> release.type} update version to ${-> version }'"
	doFirst{
		version.store(file("latest.properties"))
	}
}
task tagWorkspace(type:Exec){
	commandLine 'git', 'tag', "${-> version }"
}
task checkGitWorkspace(type:Exec){
	commandLine "git", "status", "--porcelain"
	def stdOutput = new ByteArrayOutputStream()
	standardOutput = stdOutput
	doLast{
		def gitStatus = stdOutput.toString()
		assert gitStatus == ""
	}
}
// task checkIssueTracker(type:org.acme.gradle.issuetracker.IssueChecker)
task preReleaseCheck{ dependsOn checkGitWorkspace} //, checkIssueTracker }
// task updateIssuesTracker(type:org.acme.gradle.issuetracker.UpdateReleaseInfo )
task release(type:Release){
	dependsOn "build", persistVersionInfo, tagWorkspace
	//finalizedBy "updateIssuesTracker"
}
//force checkGitWorkspace to run as very first task
if(gradle.startParameter.taskNames.contains("release")){
	gradle.startParameter.taskNames = [":preReleaseCheck"]+ gradle.startParameter.taskNames
}
import org.gradle.api.internal.tasks.options.Option
class Release extends DefaultTask{
	@Option(option="type", description="the type of a release.")
	String type = "bugfix"
	@TaskAction void release(){
		println "doing a $type release of ${project.version}"
	}
}