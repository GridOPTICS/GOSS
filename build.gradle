
// Define versions for dependencies here
// Version numbers for all of goss-core should be in the gradle.properties file.


// All projects under this project folder will have the group and version below.
allprojects {
	apply plugin: "eclipse"
	apply plugin: "maven"
	apply plugin: "groovy"
	
	group = 'pnnl.goss'	
    
    repositories {
		// For gradle-release
		maven {	url "https://oss.sonatype.org/content/groups/public"}
		// For goss plugins
		maven { url 'http://dl.bintray.com/gridoptics/GOSS/'}
        mavenLocal()
        mavenCentral()
    }
}

apply from: 'http://tellurianring.com/projects/gradle-plugins/gradle-release/apply.groovy'

subprojects {    
//	apply plugin: "java"
//    apply plugin: "osgi"
//	apply plugin: "maven"
//	apply plugin: "groovy"
//	
	apply plugin: "java"
	apply plugin: "osgi"
	
	buildscript {
		repositories {
			mavenCentral()
			jcenter()
			maven { url 'http://dl.bintray.com/gridoptics/GOSS/'}
		}
		dependencies {
			// use 1.11.2 because there is some class path issue that shows up using 1.12.0.
			classpath "org.apache.felix:org.apache.felix.ipojo.manipulator:1.11.2"
		}
	}
	
	dependencies {
		// Allow us to use groovy throughout the project.
		compile "org.codehaus.groovy:groovy-all:$groovyVersion"
		
		// Logging should be available to all projects
		compile "org.slf4j:slf4j-api:$slf4jVersion"
		compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
		
		// ipojo annotations for service registry/retrieval.
		compile "org.apache.felix:org.apache.felix.ipojo.annotations:$ipojoVersion"
		compile "org.apache.felix:org.apache.felix.ipojo:$ipojoVersion"
		compile "org.apache.felix:org.apache.felix.ipojo.manipulator:$ipojoVersion"
		
		// For testing we are going to use these ubiquitous
		testCompile "junit:junit:$junitVersion"
		testCompile "org.mockito:mockito-core:$mockitoVersion"
		testCompile "org.spockframework:spock-core:$spockVersion"
		
	}
	
    jar {
		// Include source with the jar
		from sourceSets.main.allSource
        manifest {
            instruction 'Bundle-Vendor', 'PNNL'
            instruction 'Bundle-DocURL', 'https://github.com/GridOPTICS/GOSS'
        }	
    }
	
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}
	
	artifacts {
		archives sourcesJar
		archives javadocJar
	}	
}

task wrapper (type: Wrapper) {
	gradleVersion = '2.1'
}

buildscript {
	repositories {
		mavenCentral()
		mavenLocal()

		//maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		maven { url 'http://dl.bintray.com/gridoptics/GOSS/'}
	}
	
	dependencies {
		classpath "pnnl.goss:goss-buildtools:$gossBuildToolsVersion"
	}
	
	
}

// This is now distributed within goss-buildtools release >= 0.1.7
apply plugin: 'karaf-featuresgen'

karafFeatures {
	excludes = [
		'org.slf4j/.*',
		'log4j/.*',
		'org.osgi/.*',
		'org.apache.felix/.*',
		'org.apache.karaf.shell/.*',
		'pnnl.goss/goss-buildtools/.*'
	]
	
	wraps = [
		'com.google.guava/guava/.*'
	]

	startLevels = [
		'org.apache.geronimo.specs/.*':'50',
		'org.apache.commons/.*':'60',
	]

	/*
	extraBundles = [
		"mvn:pnnl.goss:goss-core:$project.version",
		"mvn:pnnl.goss:goss-core-client:$project.version"
	]*/

	// if outputFile is not provided, the output is written to the standard
	// output.
	outputFile = new File('build/config/features.xml')
}

apply plugin: "maven-publish"


publishing {
  publications {
	featurePub(MavenPublication) {
		artifact source: 'build/config/features.xml', classifier: 'features', extension: 'xml'
		
		artifact source: 'build/config/pnnl.goss.core.cfg', classifier: 'goss-core', extension: 'cfg'
		artifact source: 'build/config/pnnl.goss.datasources.cfg', classifier: 'goss-datasources', extension: 'cfg'
		
		artifact source: 'build/config/pnnl.goss.activemq.server-default.cfg', classifier: 'goss-broker-config', extension: 'cfg'
		artifact source: 'build/config/pnnl-goss-activemq-broker.xml', classifier: 'goss-broker', extension: 'xml'
		artifact source: 'build/config/pnnl-goss-activemq-broker-nosecurity.xml', classifier: 'goss-broker-nosecurity', extension: 'xml'
	}
  }
}


task copyTask(type: Copy) {
	// we are going to attempt to build one big property replacement task so that we
	// can use all the tokens in the feature file that are above in this file
	// as well as the tokens in the goss.properties file.
	File file = new File(System.getProperty("user.home")+"/.goss/goss.properties")
	java.util.Properties javaProps = new java.util.Properties()
	
	if (file.exists()){
		javaProps.load(file.newDataInputStream())	
	}
	else{
		println "file not found."
		return
	}
	
	File cfgFolder = new File("$rootProject.projectDir/config")
	File outFolder = new File("$rootProject.buildDir/config")
	
	if (!outFolder.exists()){
		outFolder.mkdirs()
	}
	
	cfgFolder.eachFile { cfg ->
		
		String fileText = cfg.text
		
		javaProps.each{ k,v ->			
			fileText = fileText.replaceAll('@'+k+'@', v)
		}
		
		project.ext.properties.each {k, v ->
			fileText = fileText.replaceAll('@'+k+'@', v)
		}
		
		fileText = fileText.replace('@project.version@', project.version)
		fileText = fileText.replace('@project.name@', project.name)
		
		
	
		new File("$outFolder.absolutePath/$cfg.name").withWriter { out ->
			out.print fileText
		}
	}
}

task insertCoreFeature(dependsOn: generateKarafFeatures){
	doFirst{
				
		// Must match the output of generateKarafFeatures
		def featuresFilename = 'build/config/features.xml'
		
		def xml = new XmlSlurper(false, false).parse(featuresFilename)
		
		xml.appendNode{
			feature(name: 'goss-core-feature', version: "$project.version") {
				feature('goss-core')
				feature('goss-core-client')
				feature('goss-core-security')
				feature('goss-core-server')
			}		
		}
		
		def outFile = file(featuresFilename)
		
		def xmlString= new groovy.xml.StreamingMarkupBuilder().bind {
			mkp.yield xml
		}.toString()
		
		def xmlOutput = new StringWriter()
		groovy.xml.XmlUtil.serialize xmlString, xmlOutput
		
		def out = new BufferedWriter(new FileWriter(featuresFilename))
		out.write(xmlOutput.toString())
		out.close()
		
	}	
}	
	

// Configure dependency graph the way I would like it to be
generateKarafFeatures.dependsOn(install)

publishToMavenLocal.dependsOn(insertCoreFeature)

task publishGoss(dependsOn: publishToMavenLocal) { }


/*************************************************************************
 * 	From here down is testing code that should be commented out.
 * 
 * 
 */

/*
karafFeatures {
    excludes = [
        'org.slf4j/.*',
        'log4j/.*',
        'org.osgi/.*',
        'org.apache.felix/.*',
        'org.apache.karaf.shell/.*'
    ]

    wraps = [
        'com.google.guava/guava/.*'
    ]

    startLevels = [
        'org.apache.geronimo.specs/.*':'50',
        'org.apache.commons/.*':'60',
    ]

    extraBundles = [
        'mvn:mygroup:mypackage:myversion',
        'mvn:mygroup2:mypackage2:myversion2'
    ]

    // if outputFile is not provided, the output is written to the standard
    // output.
    outputFile = new File('features.xml')
}*/

// Set up properties for each of the subprojects.
/*
project(':goss-core') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-server') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
	dependencies {
		compile project{':goss-core'}
	}
}

project(':goss-core-security') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-security-utils') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-web') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
	apply plugin: 'war'
	apply plugin: 'jetty'
	repositories {
		mavenCentral()
	}
	
	dependencies {
		providedCompile 'javax.servlet:servlet-api:3.0'
	}
}*/


// Snag the version from the properties file.
// file method is provided by Project interface, created an
// instance of java.io.File relative to project directory.
//ext.versionFile = file('version.properties')
//
//// Task configuration defined without shift operator.
//task loadVersion {
//	project.version = readVersion()
//}
//
//task printVersion (group: 'versioning',
//                    description: 'Prints project version.',
//                    dependsOn: loadVersion) << {
//	logger.quiet "Version: $version"
//    logger.quiet "projectIds: $projectIds"
//}
//
//ProjectVersion readVersion() {
//	logger.quiet 'Reading the version file.'
//	
//	if (!versionFile.exists()) {
//		throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
//	}
//	
//	Properties versionProps = new Properties()
//	
//	versionFile.withInputStream { 
//		stream -> versionProps.load(stream)
//	}
//	
//	new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
//}
//
//
//class ProjectVersion {
//	Integer major
//	Integer minor
//	Boolean release
//	
//	ProjectVersion(Integer major, Integer minor) {
//		this.major = major
//		this.minor = minor
//		this.release = Boolean.FALSE
//	}
//	
//	ProjectVersion(Integer major, Integer minor, Boolean release) {
//		this.major = major
//		this.minor = minor
//		this.release = release
//	}
//	
//	@Override
//	String toString() {
//		"$major.$minor${release ? '' : '-SNAPSHOT'}"
//	}
//}
	
