buildscript {
	repositories {
		maven {
			url "http://repo.jfrog.org/artifactory/gradle"
		}
		mavenLocal()
		jcenter()
		dependencies {
			classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '3.0.1')
		}
	}

}

plugins {
	id "com.jfrog.artifactory" version "3.0.1"
	//id "com.jfrog.artifactory-upload" version "3.0.1"
	id 'osgi'
	id 'maven'
}

//Release plugin
//apply from: 'http://tellurianring.com/projects/gradle-plugins/gradle-release/apply.groovy'
//
//buildscript {
//	repositories {
//		maven{url "http://dl.bintray.com/gridoptics/GOSS"}
//		maven {
//			url "http://repo.jfrog.org/artifactory/gradle"
//		}
//
//
//		mavenLocal()
//		jcenter()
//
//		dependencies {
//			classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '3.0.1')
//		}
//	}
//}
//buildscript {
//    repositories {
//        mavenLocal()
//        jcenter()
//    }
//    dependencies {
//        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6",
//        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.5')
//    }
//}

import java.text.DateFormat
import java.text.SimpleDateFormat

def globalVersion = new Version(currentVersion)

allprojects {
	apply plugin: 'com.jfrog.artifactory-upload'
	configure(subprojects.findAll { new File(it.projectDir, 'src').directory }) {
		apply plugin: 'osgi'
		apply plugin: 'groovy'
	}
	group = 'pnnl.goss'
	version = globalVersion
	status = version.status

}

artifactoryPublish.skip = true

subprojects {
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	sourceCompatibility = '1.7'

	if (project.plugins.hasPlugin('java')) {
		println project.name
		jar {
			// Include source with the jar
			from sourceSets.main.allSource
			manifest {
				instruction 'Bundle-Vendor', 'PNNL'
				instruction 'Bundle-DocURL', 'https://github.com/GridOPTICS/GOSS'
				[
					compileJava,
					compileTestJava,
					javadoc
				]*.options*.encoding = 'UTF-8'
			}
		}

		configurations { published }

		task sourceJar(type: Jar, dependsOn: classes) {
			classifier = 'sources'
			from sourceSets.main.allSource
		}

		task javadocJar(type: Jar, dependsOn: javadoc) {
			classifier = 'javadoc'
			from javadoc.destinationDir
		}

		artifactoryPublish { dependsOn sourceJar, javadocJar }

		artifacts {
			published sourceJar
			published javadocJar
		}

		buildscript{
			repositories {
				maven{url "http://dl.bintray.com/gridoptics/GOSS"}
				mavenLocal()
				jcenter()
			}
			dependencies{
				classpath "org.apache.felix:org.apache.felix.ipojo.manipulator:$ipojoVersion",
						"pnnl.goss:goss-buildtools:${gossBuildToolsVersion}"
			}
		}

		dependencies {
			// Allow us to use groovy throughout the project.
			compile "org.codehaus.groovy:groovy-all:$groovyVersion"

			// Logging should be available to all projects
			compile "org.slf4j:slf4j-api:$slf4jVersion"
			compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
			// ipojo annotations for service registry/retrieval.
			compile "org.apache.felix:org.apache.felix.ipojo.annotations:$ipojoVersion"
			compile "org.apache.felix:org.apache.felix.ipojo:$ipojoVersion"
			compile "org.apache.felix:org.apache.felix.ipojo.manipulator:$ipojoVersion"
			// For testing we are going to use these ubiquitous
			testCompile "junit:junit:$junitVersion"
			testCompile "org.mockito:mockito-core:$mockitoVersion"
			testCompile "org.spockframework:spock-core:$spockVersion"

		}

		artifactoryPublish { dependsOn sourceJar, javadocJar }

		artifacts {
			published sourceJar
			published javadocJar
		}
	}
}


configurations { published }


artifactory {
	//contextUrl = 'http://repo.jfrog.org/artifactory'
	contextUrl = "http://oss.jfrog.org/artifactory" // "${artifactory_contextUrl}"
	publish {
		repository {
			repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
			username = "${artifactory_user}" //The publisher user name
			password = "${artifactory_password}" //The publisher password

			//      ivy {
			//        //Optional section for configuring Ivy publication (when publishIvy = true). Assumes Maven repo layout if If not specified
			//        ivyLayout = '[organization]/[module]/ivy-[revision].xml'
			//        artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
			//        mavenCompatible = false //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
			//      }
		}
		defaults {
			publishConfigs('archives', 'published')
			properties = ['build.status': "$it.project.status".toString()]
			publishBuildInfo = true
			publishArtifacts = true
			publishPom = true //Publish generated POM files to Artifactory (true by default)
			publishIvy = false //Publish generated Ivy descriptor files to Artifactory (true by default)
		}
	}
	resolve {
		repository {
			repoKey = 'libs-release' //The Artifactory (preferably virtual) repository key to resolve from
			username = "${artifactory_user}" //Optional resolver user name (leave out to use anonymous resolution)
			password = "${artifactory_password}" //The resolver password
			maven = true
		}
	}

}

task wrapper(type: Wrapper) { gradleVersion = '2.2.1' }

class Version {
	String originalVersion
	String thisVersion
	String status
	Date buildTime

	Version(String versionValue) {
		buildTime = new Date()
		originalVersion = versionValue
		if (originalVersion.endsWith('-SNAPSHOT')) {
			status = 'integration'
			thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
		} else {
			status = 'release'
			thisVersion = versionValue
		}
	}

	String getTimestamp() {
		// Convert local file timestamp to UTC
		def format = new SimpleDateFormat('yyyyMMddHHmmss')
		format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
		return format.format(buildTime)
	}

	String toString() {
		thisVersion
	}
}