buildscript {
    repositories {
        mavenLocal()
        jcenter()
        dependencies {
            // Plugin for publishing to bintray for releases.
            classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        }
    }
}

// Things that this project (root) and all subprojects have in common.
allprojects {
    repositories {
        mavenLocal()
        jcenter()
    }

    apply plugin: 'com.jfrog.bintray'				// used for bintray releases

    // Configure all subprojects with a src directory as an osgi (implies
    // java) and groovy project.
    configure(subprojects.findAll { new File(it.projectDir, 'src').directory }) {
        apply plugin: 'osgi'
        apply plugin: 'groovy'
    }

    group = 'pnnl.goss'
    version = currentVersion
    // status == 'integration' or 'release'
    //status = version.status

    // ext.varname are public to the project level.  With bintray this will
    // automatically publish the artifacts.  bintray gives us 24-hours to
    // publish them.  If not then they are deleted.
    ext.publish = false

    // Add the bintray closure for defining the project upload specifications
    bintray {
        // Test whether we are able to upload to bintray or not based upon whether
        // the user has specified bintray_user and bintray_key in their
        // gradle.properties file.  This file is located in the $HOME/.gradle
        // directory and is available for all gradle scripts.
        if (project.hasProperty("bintray_user") && project.hasProperty("bintray_key")){
            apiUrl = "https://api.bintray.com"
            user = "${bintray_user}"	// Defined in $HOME/.gradle/gradle.properties
            key = "${bintray_key}"		// Defined in $HOME/.gradle/gradle.properties
            configurations = ['published', 'archives']
            publish = project.publish
            pkg {
                repo = 'goss'
                userOrg = 'gridoptics'
                name = 'goss-core'
                desc = '''GOSS is a middleware architecture designed as a prototype
    future data analytics and integration platform.'''
                websiteUrl = 'https://github.com/GridOPTICS/GOSS/wiki'
                issueTrackerUrl = 'https://github.com/GridOPTICS/GOSS/issues'
                vcsUrl = 'https://github.com/GridOPTICS/GOSS.git'
                licenses = ['BSD']
                labels = ['goss', 'gridoptics', 'powergrid', 'fpgi', 'pnnl']
                attributes= ['plat': ['linux', 'windows']]
                publicDownloadNumbers = false
            }
        }
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    sourceCompatibility = '1.7'

    if (project.plugins.hasPlugin('java')) {
        jar {
            // Include source with the jar
            from sourceSets.main.allSource
            manifest {
                instruction 'Bundle-Vendor', 'PNNL'
                instruction 'Bundle-DocURL', 'https://github.com/GridOPTICS/GOSS'
                [
                    compileJava,
                    compileTestJava,
                    javadoc
                ]*.options*.encoding = 'UTF-8'
            }
        }

        configurations { published }

        task sourceJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            published sourceJar
            published javadocJar
        }

        buildscript{
            repositories {
                maven{url "http://dl.bintray.com/gridoptics/GOSS"}
                mavenLocal()
                jcenter()
            }
            dependencies{
                classpath "org.apache.felix:org.apache.felix.ipojo.manipulator:$ipojoVersion",
                        "pnnl.goss:goss-buildtools:${gossBuildToolsVersion}"
            }
        }

        dependencies {
            // Allow us to use groovy throughout the project.
            compile "org.codehaus.groovy:groovy-all:$groovyVersion"

            // Logging should be available to all projects
            compile "org.slf4j:slf4j-api:$slf4jVersion"
            compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
            // ipojo annotations for service registry/retrieval.
            compile "org.apache.felix:org.apache.felix.ipojo.annotations:$ipojoVersion"
            compile "org.apache.felix:org.apache.felix.ipojo:$ipojoVersion"
            compile "org.apache.felix:org.apache.felix.ipojo.manipulator:$ipojoVersion"
            // For testing we are going to use these ubiquitous
            testCompile "junit:junit:$junitVersion"
            testCompile "org.mockito:mockito-core:$mockitoVersion"
            testCompile "org.spockframework:spock-core:$spockVersion"

        }
    }
}

