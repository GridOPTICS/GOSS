// Allow generation of eclipse project.
apply plugin: 'eclipse'

// All projects under this projects folder will have the group and version below.
allprojects {
	group = 'pnnl.goss.core'
	version = '0.1.6-SNAPSHOT'
}


subprojects {
	apply plugin: 'java'
    apply plugin: 'osgi'
	
	repositories {
		mavenCentral()
	}
    
    jar {
        manifest {
            instruction 'Bundle-Vendor', 'PNNL'
            instruction 'Bundle-DocURL', 'https://github.com/GridOPTICS/GOSS'
        }
    }
    
    dependencies {
        // Logging should be available to all projects
        compile 'org.slf4j:slf4j-api:1.7.5'
        compile 'org.slf4j:slf4j-log4j12:1.7.5'
        
        // ipojo annotations for service registry/retrieval.        
        compile 'org.apache.felix:org.apache.felix.ipojo.annotations:1.12.0'
        
        // For testing we are going to use these ubiquitous
        testCompile 'junit:junit:4.11'
        testCompile 'org.mockito:mockito-all:1.10.8'
    }
}

// Set up properties for each of the subprojects.
/*
project(':goss-core') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-server') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
	dependencies {
		compile project{':goss-core'}
	}
}

project(':goss-core-security') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-security-utils') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-web') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
	apply plugin: 'war'
	apply plugin: 'jetty'
	repositories {
		mavenCentral()
	}
	
	dependencies {
		providedCompile 'javax.servlet:servlet-api:3.0'
	}
}*/


// Snag the version from the properties file.
// file method is provided by Project interface, created an
// instance of java.io.File relative to project directory.
ext.versionFile = file('version.properties')

// Task configuration defined without shift operator.
task loadVersion {
	project.version = readVersion()
}

task printVersion (group: 'versioning',
                    description: 'Prints project version.',
                    dependsOn: loadVersion) << {
	logger.quiet "Version: $version"
    logger.quiet "projectIds: $projectIds"
}

ProjectVersion readVersion() {
	logger.quiet 'Reading the version file.'
	
	if (!versionFile.exists()) {
		throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
	}
	
	Properties versionProps = new Properties()
	
	versionFile.withInputStream { 
		stream -> versionProps.load(stream)
	}
	
	new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}


class ProjectVersion {
	Integer major
	Integer minor
	Boolean release
	
	ProjectVersion(Integer major, Integer minor) {
		this.major = major
		this.minor = minor
		this.release = Boolean.FALSE
	}
	
	ProjectVersion(Integer major, Integer minor, Boolean release) {
		this.major = major
		this.minor = minor
		this.release = release
	}
	
	@Override
	String toString() {
		"$major.$minor${release ? '' : '-SNAPSHOT'}"
	}
}
	