// Define versions for dependencies here
ext {
	gradleVersion = '2.1'
    groovyVersion = '2.3.3'
	ipojoVersion = '1.11.2'
	junitVersion = '4.11'
	mockitoVersion = '1.10.8'
	slf4jVersion = '1.7.5'
	spockVersion = '0.7-groovy-2.0'
}

// All projects under this project folder will have the group and version below.
allprojects {
	apply plugin: "eclipse"
	group = 'pnnl.goss'
	version = '0.1.6-SNAPSHOT'
    
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
	}
}

subprojects {    
	apply plugin: "java"
    apply plugin: "osgi"
	apply plugin: "maven"
	apply plugin: "groovy"
	buildscript {
		repositories {
			mavenCentral()
		}
		dependencies {
			// use 1.11.2 because there is some class path issue that shows up using 1.12.0.
			classpath "org.apache.felix:org.apache.felix.ipojo.manipulator:1.11.2"
		}
	}
	
	dependencies {
		// Allow us to use groovy throughout the project.
		compile "org.codehaus.groovy:groovy-all:$groovyVersion"
		
		// Logging should be available to all projects
		compile "org.slf4j:slf4j-api:$slf4jVersion"
		compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
		
		// ipojo annotations for service registry/retrieval.
		compile "org.apache.felix:org.apache.felix.ipojo.annotations:$ipojoVersion"
		compile "org.apache.felix:org.apache.felix.ipojo:$ipojoVersion"
		compile "org.apache.felix:org.apache.felix.ipojo.manipulator:$ipojoVersion"
		
		// For testing we are going to use these ubiquitous
		testCompile "junit:junit:$junitVersion"
		testCompile "org.mockito:mockito-core:$mockitoVersion"
		testCompile "org.spockframework:spock-core:$spockVersion"
		
	}
	
    jar {
		// Include source with the jar
		from sourceSets.main.allSource
        manifest {
            instruction 'Bundle-Vendor', 'PNNL'
            instruction 'Bundle-DocURL', 'https://github.com/GridOPTICS/GOSS'
        }
		
		
    }
    
	
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}
	
	artifacts {
		archives sourcesJar
		archives javadocJar
	}	
}

task wrapper (type: Wrapper) {
	gradleVersion = '2.1'
}

apply plugin: "maven-publish"

publishing {
  publications {
	featurePub(MavenPublication) {
		artifact source: 'config/features.xml', classifier: 'features', extension: 'xml'
	}
  }
}





/*************************************************************************
 * 	From here down is testing code that should be commented out.
 * 
 * 
 */

/*
karafFeatures {
    excludes = [
        'org.slf4j/.*',
        'log4j/.*',
        'org.osgi/.*',
        'org.apache.felix/.*',
        'org.apache.karaf.shell/.*'
    ]

    wraps = [
        'com.google.guava/guava/.*'
    ]

    startLevels = [
        'org.apache.geronimo.specs/.*':'50',
        'org.apache.commons/.*':'60',
    ]

    extraBundles = [
        'mvn:mygroup:mypackage:myversion',
        'mvn:mygroup2:mypackage2:myversion2'
    ]

    // if outputFile is not provided, the output is written to the standard
    // output.
    outputFile = new File('features.xml')
}*/

// Set up properties for each of the subprojects.
/*
project(':goss-core') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-server') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
	dependencies {
		compile project{':goss-core'}
	}
}

project(':goss-core-security') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-security-utils') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-web') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
	apply plugin: 'war'
	apply plugin: 'jetty'
	repositories {
		mavenCentral()
	}
	
	dependencies {
		providedCompile 'javax.servlet:servlet-api:3.0'
	}
}*/


// Snag the version from the properties file.
// file method is provided by Project interface, created an
// instance of java.io.File relative to project directory.
ext.versionFile = file('version.properties')

// Task configuration defined without shift operator.
task loadVersion {
	project.version = readVersion()
}

task printVersion (group: 'versioning',
                    description: 'Prints project version.',
                    dependsOn: loadVersion) << {
	logger.quiet "Version: $version"
    logger.quiet "projectIds: $projectIds"
}

ProjectVersion readVersion() {
	logger.quiet 'Reading the version file.'
	
	if (!versionFile.exists()) {
		throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
	}
	
	Properties versionProps = new Properties()
	
	versionFile.withInputStream { 
		stream -> versionProps.load(stream)
	}
	
	new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
}


class ProjectVersion {
	Integer major
	Integer minor
	Boolean release
	
	ProjectVersion(Integer major, Integer minor) {
		this.major = major
		this.minor = minor
		this.release = Boolean.FALSE
	}
	
	ProjectVersion(Integer major, Integer minor, Boolean release) {
		this.major = major
		this.minor = minor
		this.release = release
	}
	
	@Override
	String toString() {
		"$major.$minor${release ? '' : '-SNAPSHOT'}"
	}
}
	