// Release plugin
apply from: 'http://tellurianring.com/projects/gradle-plugins/gradle-release/apply.groovy'

// Define versions for dependencies here
// Version numbers for all of goss-core should be in the gradle.properties file.


// All projects under this project folder will have the group and version below.
allprojects {
	apply plugin: "eclipse"
	
	group = 'pnnl.goss'	
}


subprojects {
		
	apply plugin: "maven"
	apply plugin: "groovy"	
	apply plugin: "java"
	apply plugin: "osgi"
	
	
	repositories {
		// For gradle-release
		maven {	url "https://oss.sonatype.org/content/groups/public"}
		// For goss plugins
		maven { url 'http://dl.bintray.com/gridoptics/GOSS/'}
		mavenLocal()
		mavenCentral()
	}
	
	buildscript {
		
		[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
		
		repositories {
			mavenCentral()
			maven { url 'http://jcenter.bintray.com' }
			maven { url 'http://dl.bintray.com/gridoptics/GOSS/'}
		}
		dependencies {
			classpath "org.apache.felix:org.apache.felix.ipojo.manipulator:$ipojoVersion"
			classpath "pnnl.goss:goss-buildtools:$gossBuildToolsVersion"			
		}
	}
	
	dependencies {
		// Allow us to use groovy throughout the project.
		compile "org.codehaus.groovy:groovy-all:$groovyVersion"
		
		// Logging should be available to all projects
		compile "org.slf4j:slf4j-api:$slf4jVersion"
		compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
		
		// ipojo annotations for service registry/retrieval.
		compile "org.apache.felix:org.apache.felix.ipojo.annotations:$ipojoVersion"
		compile "org.apache.felix:org.apache.felix.ipojo:$ipojoVersion"
		compile "org.apache.felix:org.apache.felix.ipojo.manipulator:$ipojoVersion"
		
		// For testing we are going to use these ubiquitous
		testCompile "junit:junit:$junitVersion"
		testCompile "org.mockito:mockito-core:$mockitoVersion"
		testCompile "org.spockframework:spock-core:$spockVersion"
		
	}
	
    jar {
		// Include source with the jar
		from sourceSets.main.allSource
        manifest {
            instruction 'Bundle-Vendor', 'PNNL'
            instruction 'Bundle-DocURL', 'https://github.com/GridOPTICS/GOSS'
			
			[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
        }
		
		//apply plugin: 'pnnl.goss.ipojoize'
    }
	
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}
	
	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

task wrapper (type: Wrapper) {
	gradleVersion = '2.2'
}


apply plugin: "maven-publish"

// Configure publishing of features and config files for shoving them into the maven
// repository.
publishing {
	publications {
		featurePub(MavenPublication) {
			artifact source: 'build/config/features.xml', classifier: 'features', extension: 'xml'
			artifact source: 'build/config/pnnl.goss.core.cfg', classifier: 'goss-core', extension: 'cfg'
			artifact source: 'build/config/pnnl.goss.datasources.cfg', classifier: 'goss-datasources', extension: 'cfg'

			artifact source: 'build/config/pnnl.goss.activemq.server-default.cfg', classifier: 'goss-broker-config', extension: 'cfg'
			artifact source: 'build/config/pnnl-goss-activemq-broker.xml', classifier: 'goss-broker', extension: 'xml'
			artifact source: 'build/config/pnnl-goss-activemq-broker-nosecurity.xml', classifier: 'goss-broker-nosecurity', extension: 'xml'
		}
	}
}


// Copy all config files to the output directory after replacing the properties that
// are available in the gradle.properties file.  The project.version and project.name
// properties are also available for replacement.  The property placeholder in the 
// config iles should be wrapped in @, for example @activemqVersion@.
task copyConfigFiles(type: Copy) {
	// we are going to attempt to build one big property replacement task so that we
	// can use all the tokens in the feature file that are above in this file
	// as well as the tokens in the goss.properties file.
	File file = new File(System.getProperty("user.home")+"/.goss/goss.properties")
	java.util.Properties javaProps = new java.util.Properties()

	if (file.exists()){
		javaProps.load(file.newDataInputStream())
	}
	else{
		println "file not found."
		return
	}

	File cfgFolder = new File("$rootProject.projectDir/config")
	File outFolder = new File("$rootProject.buildDir/config")

	if (!outFolder.exists()){
		outFolder.mkdirs()
	}

	cfgFolder.eachFile { cfg ->

		String fileText = cfg.text

		javaProps.each{ k,v ->
			fileText = fileText.replaceAll('@'+k+'@', v)
		}

		project.ext.properties.each {k, v ->
			fileText = fileText.replaceAll('@'+k+'@', v)
		}

		fileText = fileText.replace('@project.version@', project.version)
		fileText = fileText.replace('@project.name@', project.name)



		new File("$outFolder.absolutePath/$cfg.name").withWriter { out -> out.print fileText }
	}
}



/*************************************************************************
 * 	From here down is testing code that should be commented out.
 * 
 * 
 */

/*
karafFeatures {
    excludes = [
        'org.slf4j/.*',
        'log4j/.*',
        'org.osgi/.*',
        'org.apache.felix/.*',
        'org.apache.karaf.shell/.*'
    ]

    wraps = [
        'com.google.guava/guava/.*'
    ]

    startLevels = [
        'org.apache.geronimo.specs/.*':'50',
        'org.apache.commons/.*':'60',
    ]

    extraBundles = [
        'mvn:mygroup:mypackage:myversion',
        'mvn:mygroup2:mypackage2:myversion2'
    ]

    // if outputFile is not provided, the output is written to the standard
    // output.
    outputFile = new File('features.xml')
}*/

// Set up properties for each of the subprojects.
/*
project(':goss-core') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-server') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
	dependencies {
		compile project{':goss-core'}
	}
}

project(':goss-core-security') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-security-utils') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
}

project(':goss-core-web') {
	group = projectIds.group
	version = projectIds.version
	apply plugin: 'java'
	apply plugin: 'war'
	apply plugin: 'jetty'
	repositories {
		mavenCentral()
	}
	
	dependencies {
		providedCompile 'javax.servlet:servlet-api:3.0'
	}
}*/


//// Snag the version from the properties file.
//// file method is provided by Project interface, created an
//// instance of java.io.File relative to project directory.
//ext.versionFile = file('version.properties')
//
//// Task configuration defined without shift operator.
//task loadVersion {
//	project.version = readVersion()
//}
//
//task printVersion (group: 'versioning',
//                    description: 'Prints project version.',
//                    dependsOn: loadVersion) << {
//	logger.quiet "Version: $version"
//    logger.quiet "projectIds: $projectIds"
//}
//
//ProjectVersion readVersion() {
//	logger.quiet 'Reading the version file.'
//	
//	if (!versionFile.exists()) {
//		throw new GradleException("Required version file does not exist: $versionFile.canonicalPath")
//	}
//	
//	Properties versionProps = new Properties()
//	
//	versionFile.withInputStream { 
//		stream -> versionProps.load(stream)
//	}
//	
//	new ProjectVersion(versionProps.major.toInteger(), versionProps.minor.toInteger(), versionProps.release.toBoolean())
//}
//
//
//class ProjectVersion {
//	Integer major
//	Integer minor
//	Boolean release
//	
//	ProjectVersion(Integer major, Integer minor) {
//		this.major = major
//		this.minor = minor
//		this.release = Boolean.FALSE
//	}
//	
//	ProjectVersion(Integer major, Integer minor, Boolean release) {
//		this.major = major
//		this.minor = minor
//		this.release = release
//	}
//	
//	@Override
//	String toString() {
//		"$major.$minor${release ? '' : '-SNAPSHOT'}"
//	}
//}
	
