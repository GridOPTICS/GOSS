<beans
  	xmlns="http://www.springframework.org/schema/beans"
  	xmlns:amq="http://activemq.apache.org/schema/core"
  	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 
  	http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" > </bean>-->	
	 <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>credentials.properties</value>
        </property>
    </bean>	
	
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="activemq-goss-broker-test" persistent="false" >
 
        <!--
			For better performances use VM cursor and small memory limit.
			For more information, see:
            
            http://activemq.apache.org/message-cursors.html
            
            Also, if your producer is "hanging", it's probably due to producer flow control.
            For more information, see:
            http://activemq.apache.org/producer-flow-control.html
        -->
              
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="true" memoryLimit="100 mb">
                  <pendingSubscriberPolicy>
                    <vmCursor />
                  </pendingSubscriberPolicy>
                </policyEntry>
                <policyEntry queue=">" producerFlowControl="true" memoryLimit="100 mb">
                  <!-- Use VM cursor for better latency
                       For more information, see:
                       http://activemq.apache.org/message-cursors.html
                  -->     
                  <pendingQueuePolicy>
                    <vmQueueCursor/>
                  </pendingQueuePolicy>
                  
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy> 
 
        
        <!-- 
            The managementContext is used to configure how ActiveMQ is exposed in 
            JMX. By default, ActiveMQ uses the MBean server that is started by 
            the JVM. For more information, see: 
            
            http://activemq.apache.org/jmx.html 
        -->
        <managementContext>
            <managementContext createConnector="true"/>
        </managementContext>

        <!-- 
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag). 
            For more information, see: 
            
            http://activemq.apache.org/persistence.html 
        
        <persistenceAdapter>
            <kahaDB directory="${activemq.base}/data/kahadb"/>
        </persistenceAdapter>
        -->
        
          <!--
            The systemUsage controls the maximum amount of space the broker will 
            use before slowing down producers. For more information, see:
            
            http://activemq.apache.org/producer-flow-control.html
             -->
        <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage limit="100 mb"/>
                </memoryUsage>
               <!--  <storeUsage>
                    <storeUsage limit="1 gb"/>
                </storeUsage>-->
                <tempUsage>
                    <tempUsage limit="100 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>
		
		  
        <!-- 
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see: 
            
            http://activemq.apache.org/configuring-transports.html 
        -->
        <transportConnectors>
            <transportConnector name="openwire" uri="tcp://0.0.0.0:61618?wireFormat.maxInactivityDuration=0" />
            <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?wireFormat.maxInactivityDuration=0"/>
            <transportConnector name="ws" uri="ws://0.0.0.0:61614?wireFormat.maxInactivityDuration=0" />
        </transportConnectors>
        
        <plugins>
		 	<!-- <jaasAuthenticationPlugin configuration="LDAPLogin" /> -->
			<!-- <authorizationPlugin>
		        <map>
		          <bean id="lDAPAuthorizationMap" class="org.apache.activemq.security.LDAPAuthorizationMap"
		                xmlns="http://www.springframework.org/schema/beans">
		            <property name="initialContextFactory" value="com.sun.jndi.ldap.LdapCtxFactory"/>
		            <property name="connectionURL" value="ldap://localhost:10389"/>
		            <property name="authentication" value="simple"/>
		            <property name="connectionUsername" value="uid=admin,ou=system"/>
		            <property name="connectionPassword" value="rootpass"/>
		            <property name="connectionProtocol" value=""/>
		            <property name="topicSearchMatchingFormat"
		                      value="cn={0},ou=Topic,ou=Destination,ou=goss,ou=system"/>
		            <property name="topicSearchSubtreeBool" value="true"/>
		            <property name="queueSearchMatchingFormat"
		                      value="cn={0},ou=Queue,ou=Destination,ou=goss,ou=system"/>
		            <property name="queueSearchSubtreeBool" value="true"/>
		            <property name="advisorySearchBase"
		                      value="cn=ActiveMQ.Advisory,ou=Topic,ou=Destination,ou=goss,ou=system"/>
		            <property name="tempSearchBase"
		                      value="cn=ActiveMQ.Temp,ou=Topic,ou=Destination,ou=goss,ou=system"/>
		            <property name="adminBase" value="(cn=admin)"/>
		            <property name="adminAttribute" value="member"/>
		            <property name="readBase" value="(cn=read)"/>
		            <property name="readAttribute" value="member"/>
		            <property name="writeBase" value="(cn=write)"/>
		            <property name="writeAttribute" value="member"/>
		          </bean>
		        </map>
	          </authorizationPlugin>
	           
	          <bean xmlns="http://www.springframework.org/schema/beans" id="gossSecurityBroker" class="pnnl.goss.security.core.GossSecurityBroker">
		    	</bean>
		    	 -->  
 			</plugins>			
 			<!-- <messageAuthorizationPolicy>
		    	<bean class="pnnl.goss.security.core.activemq.GossAuthPolicy"
		          xmlns="http://www.springframework.org/schema/beans"/>
			</messageAuthorizationPolicy>
			 -->  
			
    </broker>

    <!-- 
        Enable web consoles, REST and Ajax APIs and demos
        
        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details 
    -->
    <!-- <import resource="jetty.xml"/>-->
    
</beans>
<!-- END SNIPPET: example -->
